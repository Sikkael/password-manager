import { FastifyInstance, FastifyRequest, FastifySchema, HTTPMethods } from "fastify";
import { FastifyDynamicSwaggerOptions } from "fastify-swagger";
import { TransformOptions } from "./SpecTransformer";
import { BuildJsonSchemasResult } from "./JsonSchema";
import { Models, SchemaKey, SchemaTypeOption } from "./Models";
export declare type RegisterOptions<S extends Models> = {
    readonly jsonSchemas: BuildJsonSchemasResult<S>;
    readonly swaggerOptions?: FastifyDynamicSwaggerOptions & {
        readonly transformSpec?: {
            readonly cache?: boolean;
            readonly routePrefix?: string;
            readonly options?: TransformOptions;
        };
    };
};
declare type RouteHandlerParams<M extends Models, Params extends void | SchemaKey<M>, Body extends void | SchemaKey<M>> = FastifyRequest & {
    readonly params: SchemaTypeOption<M, Params>;
    readonly body: SchemaTypeOption<M, Body>;
};
declare type RouteHandler<M extends Models, Params extends void | SchemaKey<M>, Body extends void | SchemaKey<M>, Reply extends void | SchemaKey<M>> = (params: RouteHandlerParams<M, Params, Body>) => Promise<SchemaTypeOption<M, Reply>>;
declare type RouteConfig<M extends Models = Models, Method extends Lowercase<HTTPMethods> = Lowercase<HTTPMethods>, Params extends void | SchemaKey<M> = void, Body extends void | SchemaKey<M> = void, Reply extends void | SchemaKey<M> = void> = {
    readonly url: string;
    readonly method: Method;
    readonly operationId: string;
    readonly description?: string;
    readonly params?: Exclude<Params, void> | {
        readonly description: string;
        readonly key: Exclude<Params, void>;
    };
    readonly body?: Exclude<Body, void> | {
        readonly description: string;
        readonly key: Exclude<Body, void>;
    };
    readonly reply?: Exclude<Reply, void> | {
        readonly description: string;
        readonly key: Exclude<Reply, void>;
    };
    readonly handler: RouteHandler<M, Params, Body, Reply>;
} & FastifySchema;
export declare type FastifyZod<M extends Models> = {
    readonly [Method in Lowercase<HTTPMethods>]: <Params extends void | SchemaKey<M> = void, Body extends void | SchemaKey<M> = void, Reply extends void | SchemaKey<M> = void>(url: string, config: Omit<RouteConfig<M, Method, Params, Body, Reply>, `url` | `method` | `schema` | `handler`>, handler: RouteHandler<M, Params, Body, Reply>) => void;
};
export declare const withRefResolver: (options: FastifyDynamicSwaggerOptions) => FastifyDynamicSwaggerOptions;
export declare const register: <S extends Models<string>>(f: FastifyInstance, { jsonSchemas: { schemas, $ref }, swaggerOptions }: RegisterOptions<S>) => void;
export {};
