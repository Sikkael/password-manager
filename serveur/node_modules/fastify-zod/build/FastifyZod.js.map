{"version":3,"sources":["../src/FastifyZod.ts"],"names":["withRefResolver","options","refResolver","clone","buildLocalReference","json","_baseUri","_fragment","i","$id","register","f","jsonSchemas","schemas","$ref","swaggerOptions","schema","addSchema","transformSpec","baseSwaggerOptions","fastifySwagger","originalRoutePrefix","routePrefix","transformedRoutePrefix","fetchTransformedSpec","originalSpec","inject","method","url","then","res","t","SpecTransformer","transform","cachedTransformedSpec","getTransformedSpec","cache","cachedTransformedSpecJson","getTransformedSpecJson","transformedSpec","JSON","stringify","cachedTransformedSpecYaml","getTransformedSpecYaml","yaml","dump","get","_request","reply","type","addRoute","operationId","params","body","handler","fastifySchema","undefined","response","createAddRoute","config","pluginInstance","delete","head","patch","post","put","decorate"],"mappings":"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","sourcesContent":["import {\n  FastifyInstance,\n  FastifyRequest,\n  FastifySchema,\n  HTTPMethods,\n} from \"fastify\";\nimport fastifySwagger, { FastifyDynamicSwaggerOptions } from \"fastify-swagger\";\nimport * as yaml from \"js-yaml\";\n\nimport { SpecTransformer, TransformOptions } from \"./SpecTransformer\";\nimport { BuildJsonSchemasResult } from \"./JsonSchema\";\nimport {\n  Models,\n  SchemaKey,\n  SchemaKeyOrDescription,\n  SchemaTypeOption,\n} from \"./Models\";\n\nexport type RegisterOptions<S extends Models> = {\n  readonly jsonSchemas: BuildJsonSchemasResult<S>;\n  readonly swaggerOptions?: FastifyDynamicSwaggerOptions & {\n    readonly transformSpec?: {\n      readonly cache?: boolean;\n      readonly routePrefix?: string;\n      readonly options?: TransformOptions;\n    };\n  };\n};\ntype RouteHandlerParams<\n  M extends Models,\n  Params extends void | SchemaKey<M>,\n  Body extends void | SchemaKey<M>,\n> = FastifyRequest & {\n  readonly params: SchemaTypeOption<M, Params>;\n  readonly body: SchemaTypeOption<M, Body>;\n};\n\ntype RouteHandler<\n  M extends Models,\n  Params extends void | SchemaKey<M>,\n  Body extends void | SchemaKey<M>,\n  Reply extends void | SchemaKey<M>,\n> = (\n  params: RouteHandlerParams<M, Params, Body>,\n) => Promise<SchemaTypeOption<M, Reply>>;\n\ntype RouteConfig<\n  M extends Models = Models,\n  Method extends Lowercase<HTTPMethods> = Lowercase<HTTPMethods>,\n  Params extends void | SchemaKey<M> = void,\n  Body extends void | SchemaKey<M> = void,\n  Reply extends void | SchemaKey<M> = void,\n> = {\n  readonly url: string;\n  readonly method: Method;\n  readonly operationId: string;\n  readonly description?: string;\n  readonly params?:\n    | Exclude<Params, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Params, void>;\n      };\n  readonly body?:\n    | Exclude<Body, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Body, void>;\n      };\n  readonly reply?:\n    | Exclude<Reply, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Reply, void>;\n      };\n  readonly handler: RouteHandler<M, Params, Body, Reply>;\n} & FastifySchema;\n\nexport type FastifyZod<M extends Models> = {\n  readonly [Method in Lowercase<HTTPMethods>]: <\n    Params extends void | SchemaKey<M> = void,\n    Body extends void | SchemaKey<M> = void,\n    Reply extends void | SchemaKey<M> = void,\n  >(\n    url: string,\n    config: Omit<\n      RouteConfig<M, Method, Params, Body, Reply>,\n      `url` | `method` | `schema` | `handler`\n    >,\n    handler: RouteHandler<M, Params, Body, Reply>,\n  ) => void;\n};\n\nexport const withRefResolver = (\n  options: FastifyDynamicSwaggerOptions,\n): FastifyDynamicSwaggerOptions => ({\n  ...options,\n  refResolver: {\n    ...options.refResolver,\n    clone: true,\n    buildLocalReference: (json, _baseUri, _fragment, i) =>\n      typeof json.$id === `string` ? json.$id : `def-${i}`,\n  },\n});\n\nexport const register = <S extends Models>(\n  f: FastifyInstance,\n  { jsonSchemas: { schemas, $ref }, swaggerOptions }: RegisterOptions<S>,\n): void => {\n  for (const schema of schemas) {\n    f.addSchema(schema);\n  }\n\n  if (swaggerOptions) {\n    const { transformSpec, ...baseSwaggerOptions } = swaggerOptions;\n\n    f.register(fastifySwagger, withRefResolver(baseSwaggerOptions));\n\n    if (transformSpec) {\n      const originalRoutePrefix =\n        baseSwaggerOptions.routePrefix ?? `/documentation`;\n      const transformedRoutePrefix =\n        transformSpec.routePrefix ?? `${originalRoutePrefix}_transformed`;\n\n      const fetchTransformedSpec = async (): Promise<unknown> => {\n        const originalSpec = await f\n          .inject({\n            method: `get`,\n            url: `${baseSwaggerOptions.routePrefix ?? `documentation`}/json`,\n          })\n          .then((res) => res.json());\n        const t = new SpecTransformer(originalSpec);\n        return t.transform(transformSpec.options);\n      };\n\n      let cachedTransformedSpec: null | Promise<unknown> = null;\n      const getTransformedSpec = async (): Promise<unknown> => {\n        if (!transformSpec.cache) {\n          return await fetchTransformedSpec();\n        }\n        if (!cachedTransformedSpec) {\n          cachedTransformedSpec = fetchTransformedSpec();\n        }\n        return await cachedTransformedSpec;\n      };\n\n      let cachedTransformedSpecJson: null | string = null;\n      const getTransformedSpecJson = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return JSON.stringify(transformedSpec, null, 2);\n        }\n        if (!cachedTransformedSpecJson) {\n          cachedTransformedSpecJson = JSON.stringify(transformedSpec, null, 2);\n        }\n        return cachedTransformedSpecJson;\n      };\n\n      let cachedTransformedSpecYaml: null | string = null;\n      const getTransformedSpecYaml = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return yaml.dump(transformedSpec);\n        }\n        if (!cachedTransformedSpecYaml) {\n          cachedTransformedSpecYaml = yaml.dump(transformedSpec);\n        }\n        return cachedTransformedSpecYaml;\n      };\n\n      f.get(`${transformedRoutePrefix}/json`, async (_request, reply) => {\n        reply.type(`application/json`);\n        return await getTransformedSpecJson();\n      });\n\n      f.get(`${transformedRoutePrefix}/yaml`, async (_request, reply) => {\n        reply.type(`text/x-yaml`);\n        return await getTransformedSpecYaml();\n      });\n    }\n  }\n\n  const addRoute = <\n    M extends Lowercase<HTTPMethods> = Lowercase<HTTPMethods>,\n    Params extends void | SchemaKey<S> = void,\n    Body extends void | SchemaKey<S> = void,\n    Reply extends void | SchemaKey<S> = void,\n  >({\n    method,\n    url,\n    operationId,\n    params,\n    body,\n    reply,\n    handler,\n    ...fastifySchema\n  }: RouteConfig<S, M, Params, Body, Reply>): void => {\n    f[method]<{\n      Params: SchemaTypeOption<S, Params>;\n      Body: SchemaTypeOption<S, Body>;\n      Reply: SchemaTypeOption<S, Reply>;\n    }>(\n      url,\n      {\n        schema: {\n          operationId,\n          params: params\n            ? $ref(params as SchemaKeyOrDescription<S>)\n            : undefined,\n          body: body ? $ref(body as SchemaKeyOrDescription<S>) : undefined,\n          response: reply\n            ? {\n                200: $ref(reply as SchemaKeyOrDescription<S>),\n              }\n            : undefined,\n          ...fastifySchema,\n        },\n      },\n      handler,\n    );\n  };\n\n  const createAddRoute =\n    <M extends Lowercase<HTTPMethods>>(method: M): FastifyZod<S>[M] =>\n    (url, config, handler) =>\n      addRoute({ url, handler, method, ...config });\n\n  const pluginInstance: FastifyZod<S> = {\n    delete: createAddRoute(`delete`),\n    get: createAddRoute(`get`),\n    head: createAddRoute(`head`),\n    options: createAddRoute(`options`),\n    patch: createAddRoute(`patch`),\n    post: createAddRoute(`post`),\n    put: createAddRoute(`put`),\n  };\n\n  f.decorate(`zod`, pluginInstance);\n};\n"],"file":"FastifyZod.js"}