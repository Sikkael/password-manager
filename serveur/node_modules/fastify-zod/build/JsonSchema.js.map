{"version":3,"sources":["../src/JsonSchema.ts"],"names":["buildJsonSchema","Type","schemaKey","buildJsonSchemas","$id","schemas","models","opts","zodSchema","z","object","zodJsonSchema","target","basePath","jsonSchema","$ref","key","description"],"mappings":";;;;;;;AAAA;;AACA;;;;AAsBA;AACA;AACA;AACO,MAAMA,eAAe,GAAG,CAC7BC,IAD6B,EAE7BC,SAF6B,KAI7BC,gBAAgB,CAAC;AAAE,GAACD,SAAD,GAAaD;AAAf,CAAD,EAAwB;AAAEG,EAAAA,GAAG,EAAEF;AAAP,CAAxB,CAAhB,CAA4DG,OAA5D,CAAoE,CAApE,CAJK;;;;AAMA,MAAMF,gBAAgB,GAAG,CAC9BG,MAD8B,EAE9BC,IAA6B,GAAG,EAFF,KAGA;AAC9B,QAAMC,SAAS,GAAGC,OAAEC,MAAF,CAASJ,MAAT,CAAlB;;AAEA,QAAMF,GAAG,GAAGG,IAAI,CAACH,GAAL,IAAa,QAAzB;AAEA,QAAMO,aAAa,GAAG,8BAAgBH,SAAhB,EAA2B;AAC/CI,IAAAA,MAAM,EAAEL,IAAI,CAACK,MADkC;AAE/CC,IAAAA,QAAQ,EAAE,CAAE,GAAET,GAAI,GAAR;AAFqC,GAA3B,CAAtB;AAKA,QAAMU,UAAsB,GAAG;AAC7BV,IAAAA,GAD6B;AAE7B,OAAGO;AAF0B,GAA/B;;AAKA,QAAMI,IAAa,GAAIC,GAAD,IAAS;AAC7B,UAAMD,IAAI,GAAI,GAAEX,GAAI,gBAClB,OAAOY,GAAP,KAAgB,QAAhB,GAA0BA,GAA1B,GAAgCA,GAAG,CAACA,GACrC,EAFD;AAGA,WAAO,OAAOA,GAAP,KAAgB,QAAhB,GACH;AACED,MAAAA;AADF,KADG,GAIH;AACEA,MAAAA,IADF;AAEEE,MAAAA,WAAW,EAAED,GAAG,CAACC;AAFnB,KAJJ;AAQD,GAZD;;AAcA,SAAO;AACLZ,IAAAA,OAAO,EAAE,CAACS,UAAD,CADJ;AAELC,IAAAA;AAFK,GAAP;AAID,CApCM","sourcesContent":["import { z, ZodType } from \"zod\";\nimport zodToJsonSchema from \"zod-to-json-schema\";\n\nimport { Models, SchemaKeyOrDescription } from \"./Models\";\nexport type BuildJsonSchemasOptions = {\n  readonly $id?: string;\n  readonly target?: `jsonSchema7` | `openApi3`;\n};\n\ntype $ref<M extends Models> = (key: SchemaKeyOrDescription<M>) => {\n  readonly $ref: string;\n  readonly description?: string;\n};\n\ntype JsonSchema = {\n  readonly $id: string;\n};\n\nexport type BuildJsonSchemasResult<M extends Models> = {\n  readonly schemas: JsonSchema[];\n  readonly $ref: $ref<M>;\n};\n\n/**\n * @deprecated\n */\nexport const buildJsonSchema = <T>(\n  Type: ZodType<T>,\n  schemaKey: string,\n): JsonSchema =>\n  buildJsonSchemas({ [schemaKey]: Type }, { $id: schemaKey }).schemas[0];\n\nexport const buildJsonSchemas = <M extends Models>(\n  models: M,\n  opts: BuildJsonSchemasOptions = {},\n): BuildJsonSchemasResult<M> => {\n  const zodSchema = z.object(models);\n\n  const $id = opts.$id ?? `Schema`;\n\n  const zodJsonSchema = zodToJsonSchema(zodSchema, {\n    target: opts.target,\n    basePath: [`${$id}#`],\n  });\n\n  const jsonSchema: JsonSchema = {\n    $id,\n    ...zodJsonSchema,\n  };\n\n  const $ref: $ref<M> = (key) => {\n    const $ref = `${$id}#/properties/${\n      typeof key === `string` ? key : key.key\n    }`;\n    return typeof key === `string`\n      ? {\n          $ref,\n        }\n      : {\n          $ref,\n          description: key.description,\n        };\n  };\n\n  return {\n    schemas: [jsonSchema],\n    $ref,\n  };\n};\n"],"file":"JsonSchema.js"}