{"version":3,"sources":["../../src/__tests__/FastifyZod.ts"],"names":["test","jsonSchemas","models","f","swaggerOptions","transformSpec","options","mergeRefs","$ref","expect","inject","method","url","then","res","json","resolves","toEqual","todoItems","payload","error","message","statusCode","id","label","state","dueDateMs","Date","getTime"],"mappings":"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","sourcesContent":["import { buildJsonSchemas } from \"../JsonSchema\";\n\nimport { models } from \"./models.fixtures\";\nimport { createTestServer } from \"./server.fixtures\";\n\ntest(`FastifyZod`, async () => {\n  const jsonSchemas = buildJsonSchemas(models, {});\n  const f = createTestServer(\n    {},\n    {\n      jsonSchemas,\n      swaggerOptions: {\n        transformSpec: {\n          options: {\n            mergeRefs: [jsonSchemas.$ref(`TodoState`)],\n          },\n        },\n      },\n    },\n  );\n\n  await expect(\n    f\n      .inject({\n        method: `get`,\n        url: `/item`,\n      })\n      .then((res) => res.json()),\n  ).resolves.toEqual({ todoItems: [] });\n\n  await expect(\n    f\n      .inject({\n        method: `post`,\n        url: `/item`,\n        payload: {},\n      })\n      .then((res) => res.json()),\n  ).resolves.toEqual({\n    error: `Bad Request`,\n    message: `body should have required property 'id'`,\n    statusCode: 400,\n  });\n\n  await expect(\n    f\n      .inject({\n        method: `post`,\n        url: `/item`,\n        payload: {\n          id: 1337,\n        },\n      })\n      .then((res) => res.json()),\n  ).resolves.toEqual({\n    error: `Bad Request`,\n    message: `body.id should match format \"uuid\"`,\n    statusCode: 400,\n  });\n\n  await expect(\n    f\n      .inject({\n        method: `post`,\n        url: `/item`,\n        payload: {\n          id: `e7f7082a-4f16-430d-8c3b-db6b8d4d3e73`,\n          label: `todo`,\n          state: `todo`,\n          dueDateMs: new Date(1337).getTime(),\n        },\n      })\n      .then((res) => res.json()),\n  ).resolves.toEqual({\n    todoItems: [\n      {\n        id: `e7f7082a-4f16-430d-8c3b-db6b8d4d3e73`,\n        label: `todo`,\n        state: `todo`,\n        dueDateMs: new Date(1337).getTime(),\n      },\n    ],\n  });\n\n  await expect(\n    f\n      .inject({\n        method: `put`,\n        url: `/item/1337`,\n      })\n      .then((res) => res.json()),\n  ).resolves.toEqual({\n    error: `Bad Request`,\n    message: `params.id should match format \"uuid\"`,\n    statusCode: 400,\n  });\n});\n"],"file":"FastifyZod.js"}