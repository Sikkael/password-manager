{"version":3,"sources":["../../src/__tests__/buildJsonSchemas.test.ts"],"names":["helpers","target","$schema","constOrEnum","value","enum","stringEnum","values","anyOf","map","type","const","describe","undefined","test","models","ZString","z","string","ZStringMin","min","ZDate","date","ZLiteral","literal","ZUuid","uuid","schemas","$ref","expect","toEqual","$id","properties","minLength","format","required","additionalProperties","NativeEnum","schema","ZEnum","ZNativeEnum","nativeEnum","ZObject","object","name","age","number","optional","ZObjectPartial","partial","ZArray","array","ZArrayMinMax","max","items","minItems","maxItems","ZTuple","tuple","ZUnion","union","ZRecord","record","ZIntersection","intersection","allOf","minimum","maximum","TodoItem","itemId","label","state","dueDate","TodoList","TodoItemState","id"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\n\nimport { buildJsonSchemas } from \"..\";\ntype Helpers = {\n  $schema: Record<string, unknown>;\n  constOrEnum: (value: unknown) => Record<string, unknown>;\n  stringEnum: (values: unknown[]) => Record<string, unknown>;\n  target?: `jsonSchema7` | `openApi3`;\n};\n\nexport const helpers = (\n  target: `jsonSchema7` | `openApi3` | undefined,\n): Helpers => {\n  if (target === `openApi3`) {\n    return {\n      $schema: {},\n      constOrEnum: (value) => ({\n        enum: [value],\n      }),\n      stringEnum: (values) => ({\n        anyOf: values.map((value) => ({\n          type: `string`,\n          enum: [value],\n        })),\n      }),\n      target,\n    };\n  }\n  if (target === `jsonSchema7`) {\n    return {\n      $schema: { $schema: `http://json-schema.org/draft-07/schema#` },\n      constOrEnum: (value) => ({ const: value }),\n      stringEnum: (values) => ({\n        type: `string`,\n        enum: values,\n      }),\n      target,\n    };\n  }\n  return helpers(`jsonSchema7`);\n};\n\ndescribe(`buildJsonSchemas`, () => {\n  for (const target of [`jsonSchema7`, `openApi3`, undefined] as const) {\n    const { $schema, constOrEnum, stringEnum } = helpers(target);\n    describe(`target: ${target ?? `none`}`, () => {\n      test(`primitives`, () => {\n        const models = {\n          ZString: z.string(),\n          ZStringMin: z.string().min(42),\n          ZDate: z.date(),\n          ZLiteral: z.literal(42),\n          ZUuid: z.string().uuid(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, {\n          target,\n        });\n\n        expect($ref(`ZString`)).toEqual({ $ref: `Schema#/properties/ZString` });\n\n        expect($ref(`ZStringMin`)).toEqual({\n          $ref: `Schema#/properties/ZStringMin`,\n        });\n\n        expect($ref(`ZDate`)).toEqual({ $ref: `Schema#/properties/ZDate` });\n\n        expect($ref(`ZLiteral`)).toEqual({\n          $ref: `Schema#/properties/ZLiteral`,\n        });\n\n        expect($ref(`ZUuid`)).toEqual({ $ref: `Schema#/properties/ZUuid` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZString: {\n                type: `string`,\n              },\n              ZStringMin: {\n                type: `string`,\n                minLength: 42,\n              },\n              ZDate: {\n                type: `string`,\n                format: `date-time`,\n              },\n              ZLiteral: {\n                type: `number`,\n                ...constOrEnum(42),\n              },\n              ZUuid: {\n                type: `string`,\n                format: `uuid`,\n              },\n            },\n            required: [`ZString`, `ZStringMin`, `ZDate`, `ZLiteral`, `ZUuid`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`enums`, () => {\n        enum NativeEnum {\n          One = `one`,\n          Two = `two`,\n          Three = `three`,\n        }\n\n        const schema = {\n          ZEnum: z.enum([`one`, `two`, `three`]),\n          ZNativeEnum: z.nativeEnum(NativeEnum),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(schema, {\n          target,\n        });\n\n        expect($ref(`ZEnum`)).toEqual({ $ref: `Schema#/properties/ZEnum` });\n\n        expect($ref(`ZNativeEnum`)).toEqual({\n          $ref: `Schema#/properties/ZNativeEnum`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n              ZNativeEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n            },\n            required: [`ZEnum`, `ZNativeEnum`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`objects`, () => {\n        const models = {\n          ZObject: z.object({\n            name: z.string(),\n            age: z.number(),\n            uuid: z.string().uuid().optional(),\n          }),\n          ZObjectPartial: z\n            .object({\n              name: z.string(),\n              age: z.number(),\n              uuid: z.string().uuid().optional(),\n            })\n            .partial(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZObject`)).toEqual({ $ref: `Schema#/properties/ZObject` });\n\n        expect($ref(`ZObjectPartial`)).toEqual({\n          $ref: `Schema#/properties/ZObjectPartial`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZObject: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                required: [`name`, `age`],\n                additionalProperties: false,\n              },\n              ZObjectPartial: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                additionalProperties: false,\n              },\n            },\n            required: [`ZObject`, `ZObjectPartial`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`arrays`, () => {\n        const models = {\n          ZArray: z.array(z.string()),\n          ZArrayMinMax: z.array(z.string()).min(5).max(12),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZArray`)).toEqual({ $ref: `Schema#/properties/ZArray` });\n\n        expect($ref(`ZArrayMinMax`)).toEqual({\n          $ref: `Schema#/properties/ZArrayMinMax`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZArray: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n              },\n              ZArrayMinMax: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n                minItems: 5,\n                maxItems: 12,\n              },\n            },\n            required: [`ZArray`, `ZArrayMinMax`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`tuples`, () => {\n        const models = {\n          ZTuple: z.tuple([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZTuple`)).toEqual({ $ref: `Schema#/properties/ZTuple` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZTuple: {\n                type: `array`,\n                minItems: 3,\n                maxItems: 3,\n                items: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZTuple`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`unions`, () => {\n        const models = {\n          ZUnion: z.union([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZUnion`)).toEqual({ $ref: `Schema#/properties/ZUnion` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZUnion: {\n                anyOf: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZUnion`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`records`, () => {\n        const models = {\n          ZRecord: z.record(z.number()),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZRecord`)).toEqual({ $ref: `Schema#/properties/ZRecord` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZRecord: {\n                type: `object`,\n                additionalProperties: { type: `number` },\n              },\n            },\n            required: [`ZRecord`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`intersections`, () => {\n        const models = {\n          ZIntersection: z.intersection(z.number().min(2), z.number().max(12)),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZIntersection`)).toEqual({\n          $ref: `Schema#/properties/ZIntersection`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZIntersection: {\n                allOf: [\n                  { type: `number`, minimum: 2 },\n                  { type: `number`, maximum: 12 },\n                ],\n              },\n            },\n            required: [`ZIntersection`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`composite`, () => {\n        const TodoItem = z.object({\n          itemId: z.number(),\n          label: z.string(),\n          state: z.union([\n            z.literal(`todo`),\n            z.literal(`in progress`),\n            z.literal(`done`),\n          ]),\n          dueDate: z.string().optional(),\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const models = {\n          TodoList,\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`TodoList`)).toEqual({\n          $ref: `Schema#/properties/TodoList`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoList: {\n                type: `array`,\n                items: {\n                  type: `object`,\n                  properties: {\n                    itemId: { type: `number` },\n                    label: { type: `string` },\n                    state: stringEnum([`todo`, `in progress`, `done`]),\n                    dueDate: { type: `string` },\n                  },\n                  required: [`itemId`, `label`, `state`],\n                  additionalProperties: false,\n                },\n              },\n            },\n            required: [`TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`references`, () => {\n        const TodoItemState = z.enum([`todo`, `in progress`, `done`]);\n\n        const TodoItem = z.object({\n          id: z.number(),\n          label: z.string(),\n          state: TodoItemState,\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const schema = {\n          TodoItemState,\n          TodoItem,\n          TodoList,\n        };\n\n        const { schemas } = buildJsonSchemas(schema, { target });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoItemState: {\n                type: `string`,\n                enum: [`todo`, `in progress`, `done`],\n              },\n              TodoItem: {\n                type: `object`,\n                properties: {\n                  id: { type: `number` },\n                  label: { type: `string` },\n                  state: { $ref: `Schema#/properties/TodoItemState` },\n                },\n                required: [`id`, `label`, `state`],\n                additionalProperties: false,\n              },\n              TodoList: {\n                type: `array`,\n                items: { $ref: `Schema#/properties/TodoItem` },\n              },\n            },\n            required: [`TodoItemState`, `TodoItem`, `TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n    });\n  }\n});\n"],"file":"buildJsonSchemas.test.js"}