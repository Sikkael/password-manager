{"version":3,"sources":["../../src/__tests__/lisa.test.ts"],"names":["test","originalSpec","JSON","parse","__dirname","encoding","t","SpecTransformer","$ref","key","result","transform","mergeRefs","schemaKeys","removeInitialSchemasPrefix","changeCase","stringify","transformedSpec","expect","toEqual"],"mappings":";;AAAA;;AACA;;AAEA;;AAEAA,IAAI,CAAE,MAAF,EAAS,YAAY;AACvB,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CACnB,MAAM,wBACJ,gBACEC,SADF,EAEG,IAFH,EAGG,IAHH,EAIG,KAJH,EAKG,WALH,EAMG,qCANH,CADI,EASJ;AACEC,IAAAA,QAAQ,EAAG;AADb,GATI,CADa,CAArB;AAeA,QAAMC,CAAC,GAAG,IAAIC,gCAAJ,CAAoBN,YAApB,CAAV;;AAEA,QAAMO,IAAI,GAAIC,GAAD,KACV;AACCD,IAAAA,IAAI,EAAG,iBAAgBC,GAAI;AAD5B,GADU,CAAb;;AAKA,QAAMC,MAAM,GAAGJ,CAAC,CAACK,SAAF,CAAY;AACzBC,IAAAA,SAAS,EAAE,CACTJ,IAAI,CAAE,YAAF,CADK,EAETA,IAAI,CAAE,MAAF,CAFK,EAGTA,IAAI,CAAE,OAAF,CAHK,EAITA,IAAI,CAAE,WAAF,CAJK,EAKTA,IAAI,CAAE,WAAF,CALK,EAMTA,IAAI,CAAE,iBAAF,CANK,EAOTA,IAAI,CAAE,eAAF,CAPK,EAQTA,IAAI,CAAE,oBAAF,CARK,EASTA,IAAI,CAAE,6BAAF,CATK,CADc;AAYzBK,IAAAA,UAAU,EAAE;AACVC,MAAAA,0BAA0B,EAAE,IADlB;AAEVC,MAAAA,UAAU,EAAG;AAFH;AAZa,GAAZ,CAAf;AAkBA,QAAM,yBACJ,gBACEX,SADF,EAEG,IAFH,EAGG,IAHH,EAIG,KAJH,EAKG,WALH,EAMG,wCANH,CADI,EASJF,IAAI,CAACc,SAAL,CAAeN,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CATI,EAUJ;AAAEL,IAAAA,QAAQ,EAAG;AAAb,GAVI,CAAN;AAaA,QAAMY,eAAe,GAAGf,IAAI,CAACC,KAAL,CACtB,MAAM,wBACJ,gBACEC,SADF,EAEG,IAFH,EAGG,IAHH,EAIG,KAJH,EAKG,WALH,EAMG,wCANH,CADI,EASJ;AAAEC,IAAAA,QAAQ,EAAG;AAAb,GATI,CADgB,CAAxB;AAcAa,EAAAA,MAAM,CAACR,MAAD,CAAN,CAAeS,OAAf,CAAuBF,eAAvB;AACD,CArEG,CAAJ","sourcesContent":["import { readFile, writeFile } from \"fs/promises\";\nimport { join } from \"path\";\n\nimport { SpecTransformer } from \"../SpecTransformer\";\n\ntest(`lisa`, async () => {\n  const originalSpec = JSON.parse(\n    await readFile(\n      join(\n        __dirname,\n        `..`,\n        `..`,\n        `src`,\n        `__tests__`,\n        `lisa.openapi.original.fixtures.json`,\n      ),\n      {\n        encoding: `utf-8`,\n      },\n    ),\n  );\n  const t = new SpecTransformer(originalSpec);\n\n  const $ref = (key: string) =>\n    ({\n      $ref: `T#/properties/${key}`,\n    } as const);\n\n  const result = t.transform({\n    mergeRefs: [\n      $ref(`JsonRecord`),\n      $ref(`Uuid`),\n      $ref(`Email`),\n      $ref(`UserEmail`),\n      $ref(`GroupRole`),\n      $ref(`ParticipantRole`),\n      $ref(`ParticipantId`),\n      $ref(`ParticipantGroupId`),\n      $ref(`UserParticipantRelationship`),\n    ],\n    schemaKeys: {\n      removeInitialSchemasPrefix: true,\n      changeCase: `PascalCase`,\n    },\n  });\n\n  await writeFile(\n    join(\n      __dirname,\n      `..`,\n      `..`,\n      `src`,\n      `__tests__`,\n      `lisa.openapi.transformed.fixtures.json`,\n    ),\n    JSON.stringify(result, null, 2),\n    { encoding: `utf-8` },\n  );\n\n  const transformedSpec = JSON.parse(\n    await readFile(\n      join(\n        __dirname,\n        `..`,\n        `..`,\n        `src`,\n        `__tests__`,\n        `lisa.openapi.transformed.fixtures.json`,\n      ),\n      { encoding: `utf-8` },\n    ),\n  );\n\n  expect(result).toEqual(transformedSpec);\n});\n"],"file":"lisa.test.js"}