"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.swaggerOptions = exports.openApiOptions = exports.createTestServer = void 0;

var _fastify = _interopRequireWildcard(require("fastify"));

var _httpErrors = require("http-errors");

var _ = require("..");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const swaggerOptions = {
  routePrefix: `/swagger`,
  swagger: {
    info: {
      title: `Fastify Zod Test Server`,
      description: `Test Server for Fastify Zod`,
      version: `0.0.0`
    }
  },
  staticCSP: true,
  exposeRoute: true
};
exports.swaggerOptions = swaggerOptions;
const openApiOptions = {
  openapi: {
    info: {
      title: `Fastify Zod Test Server`,
      description: `Test Server for Fastify Zod`,
      version: `0.0.0`
    }
  },
  staticCSP: true,
  exposeRoute: true
};
exports.openApiOptions = openApiOptions;

const createTestServer = (fastifyOptions, registerOptions) => {
  const f = (0, _fastify.default)(fastifyOptions);
  (0, _.register)(f, registerOptions);
  const state = {
    todoItems: []
  };
  f.zod.get(`/item`, {
    operationId: `getTodoItems`,
    reply: {
      description: `The list of Todo Items`,
      key: `TodoItems`
    }
  }, async () => state);
  f.zod.get(`/item/grouped-by-status`, {
    operationId: `getTodoItemsGroupedByStatus`,
    reply: `TodoItemsGroupedByStatus`
  }, async () => ({
    done: state.todoItems.filter(item => item.state === `done`),
    inProgress: state.todoItems.filter(item => item.state === `in progress`),
    todo: state.todoItems.filter(item => item.state === `todo`)
  }));
  f.zod.post(`/item`, {
    operationId: `postTodoItem`,
    body: `TodoItem`,
    reply: `TodoItems`
  }, async ({
    body: nextItem
  }) => {
    if (state.todoItems.some(prevItem => prevItem.id === nextItem.id)) {
      throw new _httpErrors.BadRequest(`item already exists`);
    }

    state.todoItems = [...state.todoItems, nextItem];
    return state;
  });
  f.zod.put(`/item/:id`, {
    operationId: `putTodoItem`,
    body: `TodoItem`,
    params: `TodoItemId`,
    reply: `TodoItem`
  }, async ({
    params: {
      id
    },
    body: nextItem
  }) => {
    if (!state.todoItems.some(prevItem => prevItem.id === id)) {
      throw new _httpErrors.NotFound(`no such item`);
    }

    state.todoItems = state.todoItems.map(prevItem => prevItem.id === id ? nextItem : prevItem);
    return nextItem;
  });
  f.zod.get(`/42`, {
    operationId: `getFortyTwo`,
    reply: `FortyTwo`
  }, async () => 42);
  return f;
};

exports.createTestServer = createTestServer;
//# sourceMappingURL=server.fixtures.js.map