{"version":3,"sources":["../../src/__tests__/server.legacy.fixtures.ts"],"names":["createLegacyTestServer","fastifyOptions","buildJsonSchemasOptions","swaggerOptions","f","register","fastifySwagger","$ref","schemas","models","schema","addSchema","state","todoItems","get","operationId","response","done","filter","item","inProgress","todo","post","body","nextItem","some","prevItem","id","BadRequest","put","params","NotFound","map"],"mappings":"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","sourcesContent":["import fastify, { FastifyInstance, FastifyServerOptions } from \"fastify\";\nimport fastifySwagger, { FastifyDynamicSwaggerOptions } from \"fastify-swagger\";\nimport { NotFound, BadRequest } from \"http-errors\";\n\nimport { buildJsonSchemas, withRefResolver } from \"..\";\nimport { BuildJsonSchemasOptions } from \"../JsonSchema\";\n\nimport {\n  models,\n  TodoItem,\n  TodoItemId,\n  TodoItems,\n  TodoItemsGroupedByStatus,\n} from \"./models.fixtures\";\n\nexport const createLegacyTestServer = (\n  fastifyOptions: FastifyServerOptions,\n  buildJsonSchemasOptions: BuildJsonSchemasOptions,\n  swaggerOptions: FastifyDynamicSwaggerOptions,\n): FastifyInstance => {\n  const f = fastify(fastifyOptions);\n\n  f.register(fastifySwagger, withRefResolver(swaggerOptions));\n\n  const { $ref, schemas } = buildJsonSchemas(models, buildJsonSchemasOptions);\n\n  for (const schema of schemas) {\n    f.addSchema(schema);\n  }\n\n  const state: TodoItems = {\n    todoItems: [],\n  };\n\n  f.get<{\n    Reply: TodoItems;\n  }>(\n    `/item`,\n    {\n      schema: {\n        operationId: `getTodoItems`,\n        response: {\n          200: $ref(`TodoItems`),\n        },\n      },\n    },\n    async () => state,\n  );\n\n  f.get<{\n    Reply: TodoItemsGroupedByStatus;\n  }>(\n    `/item/grouped-by-status`,\n    {\n      schema: {\n        operationId: `getTodoItemsGroupedByStatus`,\n        response: {\n          200: $ref(`TodoItemsGroupedByStatus`),\n        },\n      },\n    },\n    async () => ({\n      done: state.todoItems.filter((item) => item.state === `done`),\n      inProgress: state.todoItems.filter(\n        (item) => item.state === `in progress`,\n      ),\n      todo: state.todoItems.filter((item) => item.state === `todo`),\n    }),\n  );\n\n  f.post<{\n    Body: TodoItem;\n    Reply: TodoItems;\n  }>(\n    `/item`,\n    {\n      schema: {\n        operationId: `postTodoItem`,\n        body: $ref(`TodoItem`),\n        response: {\n          200: $ref(`TodoItems`),\n        },\n      },\n    },\n    async ({ body: nextItem }) => {\n      if (state.todoItems.some((prevItem) => prevItem.id === nextItem.id)) {\n        throw new BadRequest(`item already exists`);\n      }\n      state.todoItems = [...state.todoItems, nextItem];\n      return state;\n    },\n  );\n\n  f.put<{\n    Body: TodoItem;\n    Params: TodoItemId;\n    Reply: TodoItem;\n  }>(\n    `/item/:id`,\n    {\n      schema: {\n        operationId: `putTodoItem`,\n        body: $ref(`TodoItem`),\n        params: $ref(`TodoItemId`),\n        response: {\n          200: $ref(`TodoItem`),\n        },\n      },\n    },\n    async ({ params: { id }, body: nextItem }) => {\n      if (!state.todoItems.some((prevItem) => prevItem.id === id)) {\n        throw new NotFound(`no such item`);\n      }\n      state.todoItems = state.todoItems.map((prevItem) =>\n        prevItem.id === id ? nextItem : prevItem,\n      );\n      return nextItem;\n    },\n  );\n\n  return f;\n};\n"],"file":"server.legacy.fixtures.js"}